<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd">

    <!-- 1.使用类的无参构造函数创建 -->
  <!--  <bean id="user1" name="user1" class="com.it.bean.User" scope="singleton" lazy-init="true" primary="true"/>
    <alias name="user1" alias="userAlias1,userAlias2,userAlias3"/>-->

    <!-- 2.使用静态工厂进行创建 -->
    <!-- class的值不是写User对象的全路径，而是写静态工厂的全路径 -->
    <!-- factory-method的值写要调用的方法 -->
    <bean id="user2" class="com.it.bean.factory.StaticFactory" factory-method="getUser" scope="singleton"/>

    <!-- 3.使用实例工厂进行创建 -->
    <!-- 需要先创建factoryBean对象，再通过factoryBean对象进行调用 -->
   <!-- <bean id="userFactory" class="com.it.bean.factory.UserFactory"/>
    <bean id="user3" factory-bean="userFactory" factory-method="getUser" scope="prototype"/>-->

    <!--FactoryBean 工厂bean-->
    <bean id="userFactoryBean" class="com.it.bean.UserFactoryBean"/>


    <!--实现了DisposableBean接口,依赖destroy2-->
 <!--   <bean class="com.it.destory.Destroy.Destroy1" name="destroy1" depends-on="destroy2"/>
    &lt;!&ndash;配置了destroy属性&ndash;&gt;
    <bean class="com.it.destory.Destroy.Destroy2" name="destroy2" destroy-method="destroy"/>
    &lt;!&ndash;没有配置回调函数&ndash;&gt;
    <bean class="com.it.destory.Destroy.Destroy3" name="destroy3"/>-->

    <!-- 配置自动扫描的包 SpringMVC-->
    <!-- <context:component-scan base-package="com.mybatis.ssm" use-default-filters="false">
     <context:include-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
     </context:component-scan>-->

    <!--获取容器、自动装配测试-->
    <!--autowire 自动装配 默认no-->
    <bean class="com.it.aware.AContext" autowire="byType">
        <!--调用set方法-->
        <property name="name" value="张三"></property>
    </bean>
    <bean class="com.it.aware.AContextAware"/>

    <bean class="com.it.aware.Aautowired" id="aautowired">
        <property name="name" value="啦啦啦"></property>
    </bean>
    <!--xml和 注解形式自动装配-->
    <context:component-scan base-package="com.it.bean"/>

    <!--Ingnore测试-->
   <!-- <bean class="org.springframework.testIgnore.PoJoA"/>
    <bean class="org.springframework.testIgnore.PoJoB"/>


    <bean class="org.springframework.testIgnore.IgnoreOther"
          id="IgnoreOtherByType" autowire="byType"/>
    <bean class="org.springframework.testIgnore.IgnoreOther" id="IgnoreOtherByName" autowire="byName"/>
    <bean class="org.springframework.testIgnore.IgnoreOther" id="IgnoreOtherByConstructor" autowire="constructor"/>
-->

    <!--测试lookup-->
    <bean id ="man" class="com.it.bean.lookup.Man">
    </bean>
    <bean id="people" class="com.it.bean.lookup.AbstractPeople">
        <lookup-method name="getPeople" bean="man"></lookup-method>
    </bean>

    <!--测试replace-method-->
    <bean id = "replaceClass" class="com.it.bean.replace.ReplaceClass"></bean>
    <bean id = "originClass" class="com.it.bean.replace.OriginClass">
        <replaced-method name="method" replacer="replaceClass">
            <arg-type match="java.lang.String"></arg-type>
        </replaced-method>
    </bean>

    <bean id ="propertiesBean" class="com.it.bean.propertiesbean.PropertiesBean">
        <property name="name" value="${name}" />
        <property name="password" value="${password}" />
    </bean>
    <context:property-placeholder location="application.properties"></context:property-placeholder>


</beans>

